 openerp.born_image_service_server = function(instance) {    var _t = instance.web._t,    _lt = instance.web._lt;    var QWeb = instance.web.qweb;    instance.born_image_service_server = {};    var del_flag = null;     instance.web.form.widgets.add('born_image_service_server', 'instance.web.form.FieldBinaryImage3');    instance.web.form.FieldBinaryImage3 = instance.web.form.AbstractField.extend(instance.web.form.ReinitializeFieldMixin, {        template: 'uploadImage',        placeholder: "/web/static/src/img/placeholder.png",                       init: function(field_manager, node) {            var self = this;            this._super(field_manager, node);            this.binary_value = false;            this.useFileAPI = !!window.FileReader;            this.max_upload_size = 25 * 1024 * 1024; // 25Mo            if (!this.useFileAPI) {                this.fileupload_id = _.uniqueId('oe_fileupload');                $(window).on(this.fileupload_id, function() {                    var args = [].slice.call(arguments).slice(1);                    self.on_file_uploaded.apply(self, args);                });            }        },        set_value: function(value_,type_,size_,filename_) {            this.set({'value': value_});            this.set({'type':type_});            this.set({'size':size_});            this.set({'filename':filename_});        },        get_value: function() {            return this.get('value');        },           get_type: function() {            return this.get('type');        },        get_size: function() {            return this.get('size');        },        get_filename: function() {            return this.get('filename');        },        stop: function() {            if (!this.useFileAPI) {                $(window).off(this.fileupload_id);            }            this._super.apply(this, arguments);        },        initialize_content: function() {            var self= this;            this.$el.find('input.oe_form_binary_file').change(this.on_file_change);            this.$el.find('button.oe_form_binary_file_save').click(this.on_save_as);            this.$el.find('.oe_form_binary_file_clear').click(this.on_clear);            this.$el.find('.oe_form_binary_file_edit').click(function(event){                self.$el.find('input.oe_form_binary_file').click();            });            if (this.get("effective_readonly")) {                var self = this;                this.$el.find('a').click(function(ev) {                    if (self.get('value')) {                        self.on_save_as(ev);                    }                    return false;                });            }        },        on_file_change: function(e) {            var self = this;            var file_node = e.target;            if ((this.useFileAPI && file_node.files.length) || (!this.useFileAPI && $(file_node).val() !== '')) {                if (this.useFileAPI) {                    var file = file_node.files[0];                    if (file.size > this.max_upload_size) {                        var msg = _t("The selected file exceed the maximum file size of %s.");                        instance.webclient.notification.warn(_t("File upload"), _.str.sprintf(msg, instance.web.human_size(this.max_upload_size)));                        return false;                    }                    var filereader = new FileReader();                    filereader.readAsDataURL(file);                    filereader.onloadend = function(upload) {                        var data = upload.target.result;                        data = data.split(',')[1];                                                self.on_file_uploaded(file.size, file.name, file.type, data);                    };                } else {                    this.$el.find('form.oe_form_binary_form input[name=session_id]').val(this.session.session_id);                    this.$el.find('form.oe_form_binary_form').submit();                }                this.$el.find('.oe_form_binary_progress').show();                this.$el.find('.oe_form_binary').hide();            }        },        on_file_uploaded: function(size, name, content_type, file_base64) {            if (size === false) {                this.do_warn(_t("File Upload"), _t("There was a problem while uploading your file"));                // TODO: use openerp web crashmanager                console.warn("Error while uploading file : ", name);            } else {                this.filename = name;                this.on_file_uploaded_and_valid.apply(this, arguments);            }            this.$el.find('.oe_form_binary_progress').hide();            this.$el.find('.oe_form_binary').show();        },        on_file_uploaded_and_valid: function(size, name, content_type, file_base64) {            this.binary_value = true;            this.set_filename(name);            this.set_value(file_base64,content_type,size,name);            var show_value = name + " (" + instance.web.human_size(size) + ")";            this.$el.find('input').eq(0).val(show_value);                    },        on_save_as: function(ev) {            var value = this.get('value');            var filename = this.get('filename')            var size = this.get('size');            var type = this.get('type');            if (!value) {                this.do_warn(_t("Save As..."), _t("The field is empty, there's nothing to save !"));                ev.stopPropagation();            } else {                var born_image_service = new openerp.web.Model("ir.attachment");                born_image_service.call("upload_image",{fielname:filename,ufile:value,size:size,type:type,context: new instance.web.CompoundContext()}).then(function(args){                })            }            this.$el.find('input').eq(0).val('');            this.set_filename('');            return false;        },        set_filename: function(value) {            var filename = this.node.attrs.filename;            if (filename) {                var field = this.field_manager.fields[filename];                if (field) {                    field.set_value(value);                    field._dirty_flag = true;                }            }        },        on_clear: function() {            if (this.get('value') !== false) {                this.binary_value = false;                this.internal_set_value(false);            }            return false;        }    });        } 
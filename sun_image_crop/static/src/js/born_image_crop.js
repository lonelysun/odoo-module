 openerp.born_image_crop = function(instance) {    var _t = instance.web._t,    _lt = instance.web._lt;    var QWeb = instance.web.qweb;    instance.born_image_crop = {};    var del_flag = null;     instance.web.form.widgets.add('born_image_crop', 'instance.web.form.FieldBinaryImage2');    instance.web.form.FieldBinaryImage2 = instance.web.form.FieldBinary.extend({        template: 'FieldBinaryImage2',        placeholder: "/web/static/src/img/placeholder.png",                       resizeableImage : function(image_target) {        	var self = this;        	  // Some variable and settings        	  var $container,        	      orig_src = new Image(),        	      image_target = $(image_target).get(0),        	      event_state = {},        	      constrain = false,        	      min_width = 544, // Change as required        	      min_height = 344,        	      max_width = 2041, // Change as required        	      max_height = 1531,        	      resize_canvas = document.createElement('canvas');      	    	if(image_target.width < min_width || image_target.height < min_height){      	    		instance.webclient.notification.warn(_t("温馨提示"), _t("您的图片尺寸太小,建议您使用尺寸大于544px*344px的图片!"));      	    	}      	    	if(image_target.width > 600 ){      	    		width = 600;             	  	height = width / image_target.width * image_target.height;            	  	resize_canvas.width = width;            		resize_canvas.height = height;            		resize_canvas.getContext('2d').drawImage(image_target, 0, 0, width, height);               		image_target.src = resize_canvas.toDataURL("image/png");      	    	}        	  	        	  init = function(){        	    // When resizing, we will always use this copy of the original as the base        	    orig_src.src=image_target.src;        	    // Wrap the image with the container and add resize handles        	    $(image_target).wrap('<div class="resize-container"></div>')        	    .before('<span class="resize-handle resize-handle-nw"></span>')        	    .before('<span class="resize-handle resize-handle-ne"></span>')        	    .after('<span class="resize-handle resize-handle-se"></span>')        	    .after('<span class="resize-handle resize-handle-sw"></span>');        	    // Assign the container to a variable        	    $container =  $(image_target).parent('.resize-container');        	    // Add events        	    $container.on('mousedown touchstart', '.resize-handle', startResize);        	    $container.on('mousedown touchstart', 'img', startMoving);        	    $('.js-crop').on('click', crop);        	  };        	  startResize = function(e){        	    e.preventDefault();        	    e.stopPropagation();        	    saveEventState(e);        	    $(document).on('mousemove touchmove', resizing);        	    $(document).on('mouseup touchend', endResize);        	  };        	  endResize = function(e){        	    e.preventDefault();        	    $(document).off('mouseup touchend', endResize);        	    $(document).off('mousemove touchmove', resizing);        	  };        	  saveEventState = function(e){        	    // Save the initial event details and container state        	    event_state.container_width = $container.width();        	    event_state.container_height = $container.height();        	    event_state.container_left = $container.offset().left;         	    event_state.container_top = $container.offset().top;        	    event_state.mouse_x = (e.clientX || e.pageX || e.originalEvent.touches[0].clientX) + $(window).scrollLeft();         	    event_state.mouse_y = (e.clientY || e.pageY || e.originalEvent.touches[0].clientY) + $(window).scrollTop();        		// This is a fix for mobile safari        		// For some reason it does not allow a direct copy of the touches property        		if(typeof e.originalEvent.touches !== 'undefined'){        			event_state.touches = [];        			$.each(e.originalEvent.touches, function(i, ob){        			  event_state.touches[i] = {};        			  event_state.touches[i].clientX = 0+ob.clientX;        			  event_state.touches[i].clientY = 0+ob.clientY;        			});        		}        	    event_state.evnt = e;        	  };        	  resizing = function(e){        	    var mouse={},width,height,left,top,offset=$container.offset();        	    mouse.x = (e.clientX || e.pageX || e.originalEvent.touches[0].clientX) + $(window).scrollLeft();         	    mouse.y = (e.clientY || e.pageY || e.originalEvent.touches[0].clientY) + $(window).scrollTop();        	    // Position image differently depending on the corner dragged and constraints        	    if( $(event_state.evnt.target).hasClass('resize-handle-se') ){        	      width = mouse.x - event_state.container_left;        	      height = mouse.y  - event_state.container_top;        	      left = event_state.container_left;        	      top = event_state.container_top;        	    } else if($(event_state.evnt.target).hasClass('resize-handle-sw') ){        	      width = event_state.container_width - (mouse.x - event_state.container_left);        	      height = mouse.y  - event_state.container_top;        	      left = mouse.x;        	      top = event_state.container_top;        	    } else if($(event_state.evnt.target).hasClass('resize-handle-nw') ){        	      width = event_state.container_width - (mouse.x - event_state.container_left);        	      height = event_state.container_height - (mouse.y - event_state.container_top);        	      left = mouse.x;        	      top = mouse.y - ((width / orig_src.width * orig_src.height) - height);        	    } else if($(event_state.evnt.target).hasClass('resize-handle-ne') ){        	      width = mouse.x - event_state.container_left;        	      height = event_state.container_height - (mouse.y - event_state.container_top);        	      left = event_state.container_left;        	      top = mouse.y - ((width / orig_src.width * orig_src.height) - height);        	    }        		        	      height = width / orig_src.width * orig_src.height;//        	    if(width > min_width && height > min_height && width < max_width && height < max_height){        	      // To improve performance you might limit how often resizeImage() is called        	      resizeImage(width, height);          	      // Without this Firefox will not re-calculate the the image dimensions until drag end        	      $container.offset({'left': left, 'top': top});//        	    }        	  }        	  resizeImage = function(width, height){        	    resize_canvas.width = width;        	    resize_canvas.height = height;        	    resize_canvas.getContext('2d').drawImage(orig_src, 0, 0, width, height);           	    $(image_target).attr('src', resize_canvas.toDataURL("image/png"));          	  };        	  startMoving = function(e){        	    e.preventDefault();        	    e.stopPropagation();        	    saveEventState(e);        	    $(document).on('mousemove touchmove', moving);        	    $(document).on('mouseup touchend', endMoving);        	  };        	  endMoving = function(e){        	    e.preventDefault();        	    $(document).off('mouseup touchend', endMoving);        	    $(document).off('mousemove touchmove', moving);        	  };        	  moving = function(e){        	    var  mouse={}, touches;        	    e.preventDefault();        	    e.stopPropagation();        	            	    touches = e.originalEvent.touches;        	            	    mouse.x = (e.clientX || e.pageX || touches[0].clientX) + $(window).scrollLeft();         	    mouse.y = (e.clientY || e.pageY || touches[0].clientY) + $(window).scrollTop();        	    $container.offset({        	      'left': mouse.x - ( event_state.mouse_x - event_state.container_left ),        	      'top': mouse.y - ( event_state.mouse_y - event_state.container_top )         	    });        	    // Watch for pinch zoom gesture while moving        	    if(event_state.touches && event_state.touches.length > 1 && touches.length > 1){        	      var width = event_state.container_width, height = event_state.container_height;        	      var a = event_state.touches[0].clientX - event_state.touches[1].clientX;        	      a = a * a;         	      var b = event_state.touches[0].clientY - event_state.touches[1].clientY;        	      b = b * b;         	      var dist1 = Math.sqrt( a + b );        	              	      a = e.originalEvent.touches[0].clientX - touches[1].clientX;        	      a = a * a;         	      b = e.originalEvent.touches[0].clientY - touches[1].clientY;        	      b = b * b;         	      var dist2 = Math.sqrt( a + b );        	      var ratio = dist2 /dist1;        	      width = width * ratio;        	      height = height * ratio;        	      // To improve performance you might limit how often resizeImage() is called        	      resizeImage(width, height);        	    }        	  };        	  crop = function(){        	    //Find the part of the image that is inside the crop box        	    var crop_canvas,        	        left = $('.overlay').offset().left - $container.offset().left,        	        top =  $('.overlay').offset().top - $container.offset().top,        	        width = $('.overlay').width(),        	        height = $('.overlay').height();        			        	    crop_canvas = document.createElement('canvas');        	    crop_canvas.width = width;        	    crop_canvas.height = height;        	            	    crop_canvas.getContext('2d').drawImage(image_target, left, top, width, height, 0, 0, width, height);        	    self.cp(crop_canvas.toDataURL("image/png"))//        	    window.open();        	  }        	  init();        	},        	        cp :function(b64) {        	file_base64 = b64.split(',')[1];            this.internal_set_value(file_base64);        	var $content = $(".content");        	$content.remove();        	var $img = $(QWeb.render("FieldBinaryImage-img2", { widget: this, url: b64 }));            this.$el.prepend($img);            this.$el.css("width", "544px");            this.$el.css("height", "344px");            $img.load(function() {                $img.css("width",  "544px");                $img.css("height","344px");            });        },        initialize_content: function() {            var self= this;            this.$el.find('input.oe_form_binary_file').change(this.on_file_change);            this.$el.find('button.oe_form_binary_file_save').click(this.on_save_as);            this.$el.find('.oe_form_binary_file_clear').click(this.on_clear);            this.$el.find('.oe_form_binary_file_edit').click(function(event){                self.$el.find('input.oe_form_binary_file').click();            });        },        render_value: function() {            var self = this;            instance.born_image_crop.single = this;                        var url;            this.max_upload_size = 2 * 1024 * 1024; // 2MB 图片大小            if (this.get('value') && !instance.web.form.is_bin_size(this.get('value'))) {                url = 'data:image/png;base64,' + this.get('value');                            } else if (this.get('value')) {                var id = JSON.stringify(this.view.datarecord.id || null);                var field = this.name;                if (this.options.preview_image)                    field = this.options.preview_image;                url = this.session.url('/web/binary/image', {                                            model: this.view.dataset.model,                                            id: id,                                            field: field,                                            t: (new Date().getTime()),                });                            } else {                url = this.placeholder;            }                        if( del_flag &&this.get('value') && !instance.web.form.is_bin_size(this.get('value'))) {            	this.$el.find('> img').remove();            	var $ResizeableImage = $(QWeb.render("ResizeableImage"));            	this.$el.css("width", "650px");                this.$el.css("height", "500px");            	this.$el.prepend($ResizeableImage);            	            	var image = new Image();            	image.src =url;            		            		image.setAttribute("class", "resize-image");            		document.getElementById('image_content').appendChild(image);            		self.resizeableImage($('.resize-image'));            	            }else{            	var $img = $(QWeb.render("FieldBinaryImage-img2", { widget: this, url: url }));            	 $($img).click(function(e) {                     if(self.view.get("actual_mode") == "view") {                         var $button = $(".oe_form_button_edit");                         $button.openerpBounce();                         e.stopPropagation();                     }                 });                 this.$el.find('> img').remove();                 this.$el.prepend($img);                 $img.load(function() {                     if (! self.options.size)                         return;                     $img.css("max-width", "" + self.options.size[0] + "px");                     $img.css("max-height", "" + self.options.size[1] + "px");                 });                 $img.on('error', function() {                     $img.attr('src', self.placeholder);                     instance.webclient.notification.warn(_t("Image"), _t("Could not display the selected image."));                 });            }                                           },        on_file_change: function(e) {        	console.debug("on_file_change");        	console.debug(del_flag);            var self = this;            var $content = $(".content");            if($content.length > 0){            	this.binary_value = false;            	this.internal_set_value(false);            	this.set_filename("");            	this.$el.css("width", "64px");            	this.$el.css("height", "64px");            	this.$el.find('input.oe_form_binary_file').replaceWith('<input type="file" class="oe_form_binary_file" name="ufile" accept="image/*"  />');                this.$el.find('input.oe_form_binary_file').change(this.on_file_change);            	$content.remove();            }            var file_node = e.target;            if ((this.useFileAPI && file_node.files.length) || (!this.useFileAPI && $(file_node).val() !== '')) {                if (this.useFileAPI) {                    var file = file_node.files[0];                    if (file.size > this.max_upload_size) {                        var msg = _t("The selected file exceed the maximum file size of %s.");                        instance.webclient.notification.warn(_t("File upload"), _.str.sprintf(msg, instance.web.human_size(this.max_upload_size)));                        return false;                    }                    var filereader = new FileReader();                    filereader.readAsDataURL(file);                    filereader.onloadend = function(upload) {                        var data = upload.target.result;                        del_flag = true;                        self.on_file_uploaded(file.size, file.name, file.type, data);                    };                } else {                    this.$el.find('form.oe_form_binary_form input[name=session_id]').val(this.session.session_id);                    this.$el.find('form.oe_form_binary_form').submit();                }                this.$el.find('.oe_form_binary_progress').show();                this.$el.find('.oe_form_binary').hide();            }        },        on_file_uploaded: function(size, name, content_type, file_base64) {            if (size === false) {                this.do_warn(_t("File Upload"), _t("There was a problem while uploading your file"));                // TODO: use openerp web crashmanager                console.warn("Error while uploading file : ", name);            } else {                this.filename = name;                this.on_file_uploaded_and_valid.apply(this, arguments);            }            this.$el.find('.oe_form_binary_progress').hide();            this.$el.find('.oe_form_binary').show();        },        on_file_uploaded_and_valid: function(size, name, content_type, file_base64) {        	file_base64 = file_base64.split(',')[1];            this.internal_set_value(file_base64);            this.binary_value = true;            this.render_value();            this.set_filename(name);        },        on_clear: function() {        	 var $content = $(".content");                          if($content.length > 0){            	 del_flag = false;            	 $content.remove();            	 this.binary_value = false;            	 this.internal_set_value(false);            	 this.set_filename("");            	 this.$el.css("width", "64px");            	 this.$el.css("height", "64px");             	this.$el.find('input.oe_form_binary_file').replaceWith('<input type="file" class="oe_form_binary_file" name="ufile" accept="image/*"  />');                 this.$el.find('input.oe_form_binary_file').change(this.on_file_change);             	             }             var $img = $(QWeb.render("FieldBinaryImage-img2", { widget: this, url: this.placeholder }));        	 $($img).click(function(e) {                 if(self.view.get("actual_mode") == "view") {                     var $button = $(".oe_form_button_edit");                     $button.openerpBounce();                     e.stopPropagation();                 }             });             this.$el.find('> img').remove();             this.$el.prepend($img);             this.$el.css("width", "64px");        	 this.$el.css("height", "64px");             $img.load(function() {                 $img.css("width", "64px");                 $img.css("height", "64px");             });             $img.on('error', function() {                 $img.attr('src', self.placeholder);                 instance.webclient.notification.warn(_t("Image"), _t("Could not display the selected image."));             });        },        set_value: function(value_){            var changed = value_ !== this.get_value();            this._super.apply(this, arguments);            // By default, on binary images read, the server returns the binary size            // This is possible that two images have the exact same size            // Therefore we trigger the change in case the image value hasn't changed            // So the image is re-rendered correctly            if (!changed){                this.trigger("change:value", this, {                    oldValue: value_,                    newValue: value_                });            }        },    });        openerp.web.FormView.include({    	can_be_discarded: function() {            var self = this;            this._super.apply(this, arguments);            var $content = $(".content");                        if($content.length > 0){            	instance.born_image_crop.single.binary_value = false;        		instance.born_image_crop.single.internal_set_value(false);        		instance.born_image_crop.single.set_filename("");            	instance.born_image_crop.single.$el.css("width", "64px");            	instance.born_image_crop.single.$el.css("height", "64px");            	this.$el.find('input.oe_form_binary_file').replaceWith('<input type="file" class="oe_form_binary_file" name="ufile" accept="image/*"  />');                this.$el.find('input.oe_form_binary_file').change(instance.born_image_crop.single.on_file_change);            	$content.remove();            }                        return true;        },    });            openerp.web.form.FieldBoolean.include({    	start: function() {    		console.info("dddd");    		var self = this;            if(this.session.uid != 1 && this.name=='in_group_8'){            	this.$el.parent().prev().remove();            	this.$el.parent().remove();            }            this._super.apply(this, arguments);        },    });} 